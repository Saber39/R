rm(list=ls())
library(WGCNA)
setwd('C:/Users/Public/Desktop/Training/wgcna') #可以设置到别的目录下，确定一下保存文件的位置
options(stringsAsFactors = FALSE)
enableWGCNAThreads()

RNAseq_voom <- read.delim('data/All_fpkm.list',header=T,row.names = 1,sep="\t",na.strings = "-") #-代表缺失，也有可能是NA

RNAseq_voom=RNAseq_voom[seq(1,2000,by=1),]  #举例作用，所以选取了2000个基因，并且受到电脑内存的限制，16G的电脑适合跑20000个一下的基因，需要3W的基因量，要用到32G内存电脑

datExprOri=t(RNAseq_voom)    #转置，每行为一个样品，每列为一个基因，这样就和之后输入的表型的数据的矩阵的第一行和第一列的关系是对应的了。

#======================= 过滤缺失基因数目多于10%的样本：===========
nGenes = ncol(datExprOri)      #基因数目
NumberMissingBySample=apply(is.na(data.frame(datExprOri)),1, sum)   #计算每行NA的数目
KeepSample= NumberMissingBySample<0.1*nGenes #判断哪些样品的缺失率<10%，
KeepSample  #查看每个样品是否是符合条件的，如果是符合条件的则为TRUE
table(KeepSample)  #过滤的样品数目统计

datExpr=datExprOri[KeepSample,]  # 表达矩阵过滤样品，把样品提取出来，之前过滤掉了判断为FALSE的
SampleName=rownames(datExprOri)[KeepSample] #样品名称变量过滤样品

#=====================过滤方差为0的基因，以及缺失样本超过10%的基因=====
#为什么过滤掉方差为0的呢，因为他可能是在各个样本中表达量都是一样的，可能是看家基因
nSamples = nrow(datExpr)  # 统计样品数目
variancedatExpr=as.vector(apply(as.matrix(datExpr),2,var, na.rm=T))  #按列（基因）取方差
no.missingdatExpr=as.vector(apply(is.na(as.matrix(datExpr)),2, sum) )#按列（基因）统计缺失数目
KeepGenes= variancedatExpr>0 & no.missingdatExpr<0.1*nSamples  # 保留方差不等于0，且缺失低于10%的基因
table(KeepGenes)# 过滤统计

datExpr=datExpr[, KeepGenes] #过滤基因
GeneName=colnames(datExpr) #过滤前的基因名称


#根据层次聚类绘制样本树
tree=hclust(dist(datExpr),method = 'average')   #dist是使用距离的函数，hclust是层次聚类函数
pdf(file='sample clustering.pdf',w=10,h=7)
plot(tree,xlab="", sub="", cex = 0.7,main="Sample Clustering") #cex是字体大小，xlab为x轴等，都可以修改
dev.off()

#================设置网络构建参数选择范围======
powers = c(1:20)  #设置beta值的取值范围
sft = pickSoftThreshold(datExpr, RsquaredCut = 0.85,powerVector = powers, verbose = 5)  #选择软阈值，RsquaredCut = 0.9选择阈值，一般默认为大于0.85都可以；verbose是让我们的结果呈现出来一些
sft$powerEstimate#结果中的sft$powerEstimate就是我们选出来的beta值。这里很奇怪，明明结果里面power取13更为合适，大于了0.85，但是sft$powerEstimate给的建议却是1，还是以输出的结果为主吧
#Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.
#1      1   0.9230  3.380          0.974    8690      9060  11300
#2      2   0.8080  1.060          0.826    5070      5400   7780
#3      3   0.2760  0.221          0.114    3500      3640   6280
#4      4   0.0734 -0.113         -0.123    2650      2630   5430
#5      5   0.3530 -0.297          0.235    2120      1980   4860
#6      6   0.5950 -0.433          0.506    1770      1530   4450
#7      7   0.7000 -0.523          0.634    1520      1220   4140
#8      8   0.7650 -0.604          0.705    1320       987   3890
#9      9   0.7780 -0.666          0.718    1170       813   3680
#10    10   0.7960 -0.722          0.737    1050       694   3510
#11    11   0.8280 -0.761          0.779     955       599   3350
#12    12   0.8460 -0.791          0.804     872       520   3220
#13    13   0.8530 -0.819          0.817     802       454   3100
#14    14   0.8620 -0.848          0.832     742       399   2990
#15    15   0.8640 -0.869          0.840     690       357   2890
#16    16   0.8660 -0.889          0.846     644       319   2800
#17    17   0.8680 -0.907          0.854     604       288   2720
#18    18   0.8710 -0.921          0.864     568       260   2640
#19    19   0.8800 -0.936          0.878     536       236   2580
#20    20   0.8820 -0.948          0.886     507       215   2510

#每个候选软阈值的计算R2绘图（R平方）
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
# 绘制一条设定的阈值线
abline(h=0.90,col="red")
abline(h=0.85,col="blue")

#绘制每个候选beta的平均连接度
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
    main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")


#===============自动构建WGCNA模型==================
#========表达矩阵转换成邻接矩阵，然后再将邻接矩阵转换成拓扑矩阵,识别模块=============
net = blockwiseModules(
  datExpr,                               #主要输入矩阵
  power = sft$powerEstimate,             #软阈值，前面计算出来的（这里有个问题就是计算出来的是1，但是实际上我们应该取12或者13比较合适。这里需要手动修改为power=13）
  maxBlockSize = 10000,                  #最大block大小，将所有基因放在一个block中，这里能计算的基因的数目的大小和电脑的内存大小有关，参见WGCNA的官方说明文档；如果我们的电脑带不动的话，其实可以挑选一些重要的基因进行分析，比如挑选出来转录因子进行分析。
  TOMType = "unsigned",                  #选择unsigned，使用标准TOM矩阵
  deepSplit = 2, minModuleSize = 30,     #剪切树参数，deepSplit取值0-4
  mergeCutHeight = 0.25,                 # 模块合并参数，越大模块越少
  numericLabels = TRUE,                             # T返回数字，F返回颜色
  pamRespectsDendro = FALSE,  
  saveTOMs = TRUE,                        #让我们的TOM矩阵保存下来，因为这一步是最耗费计算量时间的
  saveTOMFileBase = "FPKM-TOM",          # 保存的文件就是FPKM-TOM.block1.R.Data
  loadTOMs = FALSE,                       #如果是第一次做，是FALSE，如果是第二次做，那么就是TURE，前面的save就是false了，可以节省很多时间
  verbose = 3
)

length(net$colors)#查看基因的数目，net$colors代表了每个基因分到了哪个模块里面
head(net$colors)#查看前几个的结果，是用数字表示的，和前面的使用数字的代码对应。

#获取模块颜色，将数字转化为颜色
moduleColors = labels2colors(net$colors)
> head(moduleColors)
#[1] "turquoise"   "brown"       "salmon"      "blue"        "greenyellow"
#[6] "turquoise" 


#获取每个模块的特征值
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0); #重新排序，相似颜色的挨在一起

# 输出每个基因所在的模块，以及与该模块的KME值
#file.remove('All_Gene_KME.txt')  如果以前存在的话需要删除，第一次执行不需要存在
#substring(colnames(MEs),3)将颜色提取出来进行循环，循环给每一个module
#[1] "lightgreen"    "grey60"        "lightyellow"   "yellow"        "green"        
 #[6] "lightcyan"     "black"         "darkred"       "cyan"          "turquoise"    
#[11] "darkorange"    "greenyellow"   "magenta"       "white"         "midnightblue" 
#[16] "orange"        "tan"           "brown"         "darkturquoise" "darkgreen"    
#[21] "royalblue"     "salmon"        "darkgrey"      "purple"        "pink"         
#[26] "blue"          "red"           "grey"         
> 
for(module in substring(colnames(MEs),3)){
  if(module == "grey") next
  ME=as.data.frame(MEs[,paste("ME",module,sep="")])
  colnames(ME)=module
  datModExpr=datExpr[,moduleColors==module]
  datKME = signedKME(datModExpr, ME)
  datKME=cbind(datKME,rep(module,length(datKME)))
  write.table(datKME,quote = F,row.names = T,append = T,file = "All_Gene_KME.txt",col.names = F)
}
#===============模块绘图==================
#将表达矩阵转换为一个颜色矩阵，使用log10（FPKM+1）
expColor=t(numbers2colors(log10(datExpr+1),colors=blueWhiteRed(100),naColor="grey"))  #生成了一个颜色的矩阵，可以使用expColor进行一下查看
colnames(expColor)=rownames(datExpr)
#绘制基因的树形图，模块图，以及每个样品的表达图
png("wgcna.dendroColors.png",height = 700,width = 900)
plotDendroAndColors(net$dendrograms[[1]], 
                    colors=cbind(moduleColors[net$blockGenes[[1]]],expColor),
                    c("Module",colnames(expColor)),
                    dendroLabels = F, hang = 0.03,
                    addGuide = T, guideHang = 0.05,
                    cex.rowText=0.5)
dev.off()


#第二种plotDendroAndColors，最后这个按照网页调试出来的是正确的
plotDendroAndColors(net$dendrograms[[1]], moduleColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
dev.off()


#绘制两两模块间的邻接矩阵
png("wgcna.adjacency.heatmap.png",height = 1000,width = 900)
plotEigengeneNetworks(MEs, "Eigengene adjacency heatmap",plotDendrograms = F,
                      marDendro = c(4,4,2,4))
dev.off()


#绘制所有模块的表达值热图与特征值条形图
for(module in substring(colnames(MEs),3)){
  if(module == "grey") next
  ME=MEs[,paste("ME",module,sep="")]
  png(paste("wgcna.", module, ".express.barplot.png", sep=""),height = 700,width = 900)
  par(mfrow=c(2,1),mar=c(0.3,5.5,3,2))
  plotMat(t(scale(datExpr[,moduleColors==module])),
          rlabels=F,main=module,cex.main=2,clabels=F)
  
  par(mar=c(5,4.2,0,0.7))
  barplot(ME,col=module,main="",cex.main=2,ylab="eigengene expression",xlab="sample")
  dev.off()
}
#将结果保存成cytoscape的输入文件格式

#读入构建时保存的TOM矩阵
load('FPKM-TOM-block.1.RData') 
TOM=as.matrix(TOM)

#或重新计算TOM矩阵
#TOM = TOMsimilarityFromExpr(datExpr, power =sft$powerEstimate,TOMType = "unsigned"); 

for(module in substring(colnames(MEs),3)){
  if(module == "grey") next
  probes = colnames(datExpr)
  inModule = is.finite(match(moduleColors, module))
  modProbes = probes[inModule]
  modTOM = TOM[inModule, inModule]
  dimnames(modTOM) = list(modProbes, modProbes)
  cyt = exportNetworkToCytoscape(modTOM,
                                 edgeFile = paste("CytoscapeInput-edges-", module, ".txt", sep=""),
                                 nodeFile = paste("CytoscapeInput-nodes-", module, ".txt", sep=""),
                                 weighted = TRUE,
                                 threshold = 0.02,
                                 nodeNames = modProbes,
                                 nodeAttr = moduleColors[inModule])
}

#与表型的关联
allTraits<-read.delim('data/pheno.txt',header=T,sep="\t")  #读取表型值

#去除删除的样本
traitRows = match(SampleName, allTraits[,1]);
datTraits = allTraits[traitRows, -1];    
rownames(datTraits) = allTraits[traitRows, 1];

#计算ME与表型的相关系数，并计算p值
moduleTraitCor = cor(MEs, datTraits, use = "p") # use=p代表去掉缺失计算
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)#

#整理要显示在图中的数字,第一行为相关系数，第二行为p值
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",
                    signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)

#绘制关联热图
pdf("wgcna.Module-trait.heatmap.pdf", width = 10, height = 15)
par(mar = c(6, 8.8, 3, 2.2))  
labeledHeatmap(Matrix = moduleTraitCor,   #相关系数
               xLabels = colnames(datTraits), #x轴为表型
               yLabels = names(MEs),#y轴为模块
               ySymbols = names(MEs),
               colorLabels = FALSE, 
               colors = blueWhiteRed(50),
               textMatrix = textMatrix, #每个单元格的内容
               setStdMargins = FALSE,
               cex.text = 0.8,
               zlim = c(-1,1),
               main = "Module-trait relationships")
dev.off()
